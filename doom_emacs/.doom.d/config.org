#+TITLE: My doom configuration
#+AUTHOR: Emin Umut Gerçek
#+EMAIL: umutgercek1999@gmail.com

* Non doom
** Copy Paste
#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 tab-width 4
 uniquify-buffer-name-style 'forward
 window-combination-resize t
 x-stretch-cursor t)

(setq undo-limit 80000000
      evil-want-fine-undo t
      auto-save-default t
      inhibit-compacting-font-caches t
      truncate-string-ellipsis "…"
      display-line-numbers-type 'relative)
                                        ;(global-subword-mode 1)

(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))(when (file-exists-p custom-file)
                                                                             (load custom-file))

(setq writeroom-fullscreen-effect t)
#+END_SRC
** Maximize on boot
*** KILL Old
#+BEGIN_SRC emacs-lisp :tangle no
(if (eq initial-window-system 'x)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC
*** New
#+BEGIN_SRC emacs-lisp
(toggle-frame-fullscreen)
#+END_SRC
* Doom
** KILL Projectile
#+BEGIN_SRC emacs-lisp :tangle no
(setq projectile-project-search-path '("~/src/"))
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
;; (setq doom-font (font-spec :family "SauceCodePro Nerd Font" :size 17))
(setq doom-font (font-spec :family "SauceCodePro NF" :size 17))
;; (setq doom-font (font-spec :family "JetBrains Mono" :size 15))
;; (setq doom-font (font-spec :family "Hack Nerd Font Mono" :size 15))
#+END_SRC
** User Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Umut Gercek"
      user-mail-address "umutgercek1999@gmail.com")
#+END_SRC
** Better Default
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs nil)
(unless (display-graphic-p)
  (require 'evil-terminal-cursor-changer)
  (evil-terminal-cursor-changer-activate) ; or (etcc-on)
  )
#+END_SRC
** Theme
*** Light & Dark
#+BEGIN_SRC emacs-lisp
(setq doom-solarized-dark-brighter-text t)
(setq doom-solarized-dark-brighter-comments t)
(setq doom-themes-enable-bold t)

(setq my/current-time (string-to-number (format-time-string "%H")))

(if
    (and
     (< 7 my/current-time)
     (< my/current-time 17 ))
    (setq my/current-theme 'doom-one-light)
  (setq my/current-theme 'doom-solarized-dark))

(setq doom-theme my/current-theme)
(custom-set-faces!
  `(region     :background ,"#094A5A"))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(setq doom-scratch-buffer-major-mode t)

(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions 'doom-dashboard-widget-footer)
(remove-hook '+doom-dashboard-functions 'doom-dashboard-widget-loaded)

(setq fancy-splash-image "~/.doom.d/GnuLove.png")

(define-key evil-normal-state-map (kbd "C-c =") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt)

(setq +evil-want-o/O-to-continue-comments nil)

(after! evil-snipe
  (setq evil-snipe-scope 'visible)
  (setq evil-snipe-repeat-scope 'buffer)
  (setq evil-snipe-spillover-scope 'whole-buffer))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(map!
  (:after dired
    (:map dired-mode-map
      :n "RET" 'dired-find-alternate-file ;;Open in same bufer
          "-"   'find-alternate-file)
          "C-x i" #'peep-dired
     ))
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC
** Rainbow Deliiters
#+BEGIN_SRC emacs-lisp
(setq rainbow-delimiters-max-face-count 9)
#+END_SRC
** KILL SPC SPC as M-x
#+BEGIN_SRC emacs-lisp :tangle no
(map! :leader
      :desc "Open like spacemacs"
      "SPC" #'counsel-M-x)
#+END_SRC
* Org
** Messy
#+BEGIN_SRC emacs-lisp
(setq org-clock-persist t)
(org-clock-persistence-insinuate)
(setq org-clock-persist-query-resume nil)
;; (setq org-hide-emphasis-markers t)

(setq org-directory "~/Dropbox/Org")
(after! org
  (setq org-directory "~/Dropbox/Org"))

;;(setq +org:reading-list-file (+org/expand-org-file-name "gtd/read-list.org"))
;;(setq +org:bookmarks-file (+org/expand-org-file-name "gtd/bookmarks.org"))

(after! org
  (setq org-src-window-setup 'current-window))

(after! org-mode
  (unmap! '(motion) "C-h")
  )

(setq org-directory "~/Dropbox/org")

;; (use-package evil
;;   :custom
;;   evil-disable-insert-state-bindings t
;;   )
(setq org-emphasis-alist
      '(("/" italic)
        ("_" underline)
        ("=" org-verbatim verbatim)
        ("~" org-code verbatim)
        ("+"
         (:strike-through t))))
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp
;;Agenda
(setq org-agenda-files (directory-files-recursively "~/Dropbox/org/gtd/" "\\.org$"))

(use-package! org-super-agenda
  :commands (org-super-agenda-mode))
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil org-agenda-tags-column 100)
(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Assignments"
                           :tag "Assignment"
                           :order 10)
                          (:name "Issues"
                           :tag "Issue"
                           :order 12)
                          (:name "Emacs"
                           :tag "Emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "Project"
                           :order 14)
                          (:name "Research"
                           :tag "Research"
                           :order 15)
                          (:name "To read"
                           :tag "Read"
                           :order 30)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "University"
                           :tag "uni"
                           :order 32)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates '(
                              ("t" "Todo")
                              ("tn" "No time" entry
                               (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks")
                               "* TODO %^{Description} %^g\n  %?")
                              ("tt" "With time" entry
                               (file+headline "~/Dropbox/org/gtd/agenda.org" "Tasks")
                               "* TODO %^{Description} %^g\n \%^t\n  %?")


                              ("T" "Tickler" entry
                               (file+headline "~/Dropbox/org/gtd/tickler.org" "Tickler")
                               "* %i%? \n %U")

                              ("n" "Simple Notes" entry
                               (file+headline "~/Dropbox/org/gtd/inbox.org" "Notes")
                               "* %^{Description} %^g\n  %?")

                              ("j" "Journal" entry
                               (file+datetree "~/Dropbox/org/gtd/journal.org")
                               "* %U %?" :clock-in t :clock-keep t)


                              ("l" "Log")

                              ("ls" "Log SICP/LISP daily" entry
                               (file+olp+datetree "~/Dropbox/org/gtd/log.org" "SICP")
                               "* %<%H:%M>\n%^{minute}p%^{page}p%?" :jump-to-captured t :immediate-finish t)

                              ("lu" "Log UNIX daily" entry
                               (file+olp+datetree "~/Dropbox/org/gtd/log.org" "UNIX")
                               "* %<%H:%M> %^{Topic}\n%^{minute|60}p" :immediate-finish t)

                              ("r" "Resource")

                              ("ri" "Internet" entry
                               (file+olp "~/Dropbox/org/gtd/inbox.org" "Resources" "Internet")
                               "* [[%c][%^{Name of link}]] %^g\n%U\n")))
#+END_SRC
** org-download
https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/
#+BEGIN_SRC emacs-lisp
(defun zz/org-download-paste-clipboard (&optional use-default-filename)
  (interactive "P")
  (require 'org-download)
  (let ((file
         (if (not use-default-filename)
             (read-string (format "Filename [%s]: " org-download-screenshot-basename)
                          nil nil org-download-screenshot-basename)
           nil)))
    (org-download-clipboard file)))

(after! org
  (setq org-download-method 'directory)
  (setq org-download-image-dir "~/Documents/Assets/Download")
  (setq org-download-heading-lvl nil)
  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-image-actual-width 750)
  (map! :map org-mode-map
        "C-c l a y" #'zz/org-download-paste-clipboard
        "C-M-y" #'zz/org-download-paste-clipboard))
#+END_SRC

** org bullets
#+BEGIN_SRC emacs-lisp
;; (setq
;;  ;; org-superstar-headline-bullets-list '("⁖" "*" "†" "✸" "✿")
;;  org-superstar-headline-bullets-list '("*")
;;  )
#+END_SRC
** Visual
*** KILL utf8
It also hides emphasis markers
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook! 'org-mode-hook #'+org-pretty-mode )
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "org-ctrl-c-star copy"
      "8" 'org-ctrl-c-star)
#+END_SRC
** Automaticalyl add new list item
#+BEGIN_SRC emacs-lisp
(org-autolist-mode 1)
#+END_SRC
** Org Log Done
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

#+RESULTS:
: time

* Translator
** KILL Google Translate
#+BEGIN_SRC emacs-lisp :tangle no
(use-package google-translate
  :custom
  (google-translate-backend-method 'curl)
  (google-translate-default-source-language "en")
  (google-translate-default-target-language "tr")
  :config
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))
(map! :leader
      :desc "Translate word"
      "d l" 'google-translate-at-point
      )
#+END_SRC
** TODO Offline
* Bookmark like
** notes
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Go to notes directory"
      "a n" 'my/notes-counsel-find-file
      )

(defun my/notes-counsel-find-file ()
  "Foobar"
  (interactive)
  (counsel-find-file "/home/umut/Dropbox/org/Notes"))
#+END_SRC
** gtd
#+BEGIN_SRC emacs-lisp
(defun my/gtd-counsel-find-file ()
  "Foobar"
  (interactive)
  (counsel-find-file "/home/umut/Dropbox/org/gtd"))

(map! :leader
      :desc "Go to notes directory"
      "a g" 'my/gtd-counsel-find-file
      )
#+END_SRC
** src
#+BEGIN_SRC emacs-lisp
(defun my/src-counsel-find-file ()
  "Foobar"
  (interactive)
  (counsel-find-file "/home/umut/src/"))

(map! :leader
      :desc "Go to notes directory"
      "a s" 'my/src-counsel-find-file
      )
#+END_SRC
** documents
#+BEGIN_SRC emacs-lisp
(defun my/documents-counsel-find-file ()
  "Foobar"
  (interactive)
  (counsel-find-file "/home/umut/Document/"))

(map! :leader
      :desc "Go to documents directory"
      "a d" 'my/documents-counsel-find-file
      )
#+END_SRC
* Functions
** Mine
*** Curly to Normal Quote
#+BEGIN_SRC emacs-lisp
(defun my/curly-quoation-to-normal-quoation()
  "Change any curly quotation mark to normal quoation mark"
  (interactive)
  (goto-char (point-min))
  (while (search-forward "‘" nil t)
    (replace-match "'"))
  (goto-char (point-min))
  (while (search-forward "’" nil t)
    (replace-match "'"))

  (goto-char (point-min))
  (while (search-forward "“" nil t)
    (replace-match "\""))

  (goto-char (point-min))
  (while (search-forward "”" nil t)
    (replace-match "\""))
  )
#+END_SRC
*** Debug Functions
#+BEGIN_SRC emacs-lisp
(defun my/error-line ()
  "Create an error message in C++"
  (interactive)
  (move-beginning-of-line nil)
  (insert "std::cout << \"Error:\" << __LINE__ << std::endl;")
  )

(map! :leader
      :desc "Create an error message in C++"
      "d e" 'my/error-line
      )
#+END_SRC
*** Open a folder
#+BEGIN_SRC emacs-lisp
(defun my/open-folder ()
  "Opens a folder with xdg-open"
  (interactive)
  (shell-command "xdg-open ."))
#+END_SRC
*** Org Table y n
Very hacky but it works.
#+BEGIN_SRC emacs-lisp
(defun my/org-table-color-y-n (start end)
  "Make =y= s green and n s red with =y= and ~n~"
  (interactive "r")
  (replace-regexp " y " " =y= " nil start end)
  (replace-regexp " n " " ~n~ " nil start end))
#+END_SRC
*** Just one space in region
https://stackoverflow.com/questions/8674912/how-to-collapse-whitespaces-in-a-region
#+BEGIN_SRC emacs-lisp
(defun my/just-one-space-in-region (beg end)
  "replace all whitespace in the region with single spaces"
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (while (re-search-forward "\\s-+" nil t)
        (replace-match " ")))))

(map! :leader
      :desc "Go to documents directory"
      "j s" 'my/my/just-one-space-in-region)
#+END_SRC
** xah lee
*** TODO Open File Under Cursor
#+BEGIN_SRC emacs-lisp
(defun xah-open-file-at-cursor ()
  "Open the file path under cursor.
If there is text selection, uses the text selection for path.
If the path starts with “http://”, open the URL in browser.
Input path can be {relative, full path, URL}.
Path may have a trailing “:‹n›” that indicates line number. If so, jump to that line number.
If path does not have a file extension, automatically try with “.el” for elisp files.
This command is similar to `find-file-at-point' but without prompting for confirmation.

URL `http://ergoemacs.org/emacs/emacs_open_file_path_fast.html'
Version 2019-01-16"
  (interactive)
  (let* (($inputStr (if (use-region-p)
                        (buffer-substring-no-properties (region-beginning) (region-end))
                      (let ($p0 $p1 $p2
                                ;; chars that are likely to be delimiters of file path or url, e.g. whitespace, comma. The colon is a problem. cuz it's in url, but not in file name. Don't want to use just space as delimiter because path or url are often in brackets or quotes as in markdown or html
                                ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\"))
                        (setq $p0 (point))
                        (skip-chars-backward $pathStops)
                        (setq $p1 (point))
                        (goto-char $p0)
                        (skip-chars-forward $pathStops)
                        (setq $p2 (point))
                        (goto-char $p0)
                        (buffer-substring-no-properties $p1 $p2))))
         ($path
          (replace-regexp-in-string
           "^file:///" "/"
           (replace-regexp-in-string
            ":\\'" "" $inputStr))))
    (if (string-match-p "\\`https?://" $path)
        (if (fboundp 'xahsite-url-to-filepath)
            (let (($x (xahsite-url-to-filepath $path)))
              (if (string-match "^http" $x )
                  (browse-url $x)
                (find-file $x)))
          (progn (browse-url $path)))
      (if ; not starting “http://”
          (string-match "^\\`\\(.+?\\):\\([0-9]+\\)\\'" $path)
          (let (
                ($fpath (match-string 1 $path))
                ($line-num (string-to-number (match-string 2 $path))))
            (if (file-exists-p $fpath)
                (progn
                  (find-file $fpath)
                  (goto-char 1)
                  (forward-line (1- $line-num)))
              (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
                (find-file $fpath))))
        (if (file-exists-p $path)
            (progn ; open f.ts instead of f.js
              (let (($ext (file-name-extension $path))
                    ($fnamecore (file-name-sans-extension $path)))
                (if (and (string-equal $ext "js")
                         (file-exists-p (concat $fnamecore ".ts")))
                    (find-file (concat $fnamecore ".ts"))
                  (find-file $path))))
          (if (file-exists-p (concat $path ".el"))
              (find-file (concat $path ".el"))
            (when (y-or-n-p (format "file no exist: 「%s」. Create?" $path))
              (find-file $path ))))))))

(map! :leader
      :desc "Translate word"
      "d f" 'xah-open-file-at-cursor
      )
#+END_SRC
*** Title Case
#+BEGIN_SRC emacs-lisp
(defun xah-title-case-region-or-line (@begin @end)
  "Title case text between nearest brackets, or current line, or text selection.
Capitalize first letter of each word, except words like {to, of, the, a, in, or, and, …}. If a word already contains cap letters such as HTTP, URL, they are left as is.

When called in a elisp program, *begin *end are region boundaries.
URL `http://ergoemacs.org/emacs/elisp_title_case_text.html'
Version 2017-01-11"
  (interactive
   (if (use-region-p)
       (list (region-beginning) (region-end))
     (let (
           $p1
           $p2
           ($skipChars "^\"<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕"))
       (progn
         (skip-chars-backward $skipChars (line-beginning-position))
         (setq $p1 (point))
         (skip-chars-forward $skipChars (line-end-position))
         (setq $p2 (point)))
       (list $p1 $p2))))
  (let* (
         ($strPairs [
                     [" A " " a "]
                     [" And " " and "]
                     [" At " " at "]
                     [" As " " as "]
                     [" By " " by "]
                     [" Be " " be "]
                     [" Into " " into "]
                     [" In " " in "]
                     [" Is " " is "]
                     [" It " " it "]
                     [" For " " for "]
                     [" Of " " of "]
                     [" Or " " or "]
                     [" On " " on "]
                     [" Via " " via "]
                     [" The " " the "]
                     [" That " " that "]
                     [" To " " to "]
                     [" Vs " " vs "]
                     [" With " " with "]
                     [" From " " from "]
                     ["'S " "'s "]
                     ["'T " "'t "]
                     ]))
    (save-excursion
      (save-restriction
        (narrow-to-region @begin @end)
        (upcase-initials-region (point-min) (point-max))
        (let ((case-fold-search nil))
          (mapc
           (lambda ($x)
             (goto-char (point-min))
             (while
                 (search-forward (aref $x 0) nil t)
               (replace-match (aref $x 1) "FIXEDCASE" "LITERAL")))
           $strPairs))))))

(map! :leader
      "j t"  'xah-title-case-region-or-line
      )
#+END_SRC
* Languages
** KILL C/C++
#+BEGIN_SRC emacs-lisp :tangle no
(defun my-compile-run ()
  (interactive)
  (save-buffer)
  (if (get-buffer "vterm")
      (setq cur-term "vterm")
    (setq cur-term "*doom:vterm-popup:main*")
    )
  (comint-send-string cur-term
                      (concat "clear"
                              "\n"
                              "g++ *.cpp"
                              ";"
                              "./a.out"
                              "\n")))

(defun my-compile-run-with-test ()
  (interactive)
  (save-buffer)
  (if (get-buffer "vterm")
      (setq cur-term "vterm")
    (setq cur-term "*doom:vterm-popup:main*")
    )
  (comint-send-string cur-term (concat "clear"
                                       "\n"
                                       "g++ "
                                       (buffer-name)
                                       ";"
                                       "./a.out"
                                       "<test"
                                       "\n")))

(map! :leader
      :desc "Compile and Run in vterm buffer"
      "d c"  'my-compile-run
      "d t"  'my-compile-run-with-test
      )
#+END_SRC

** Notes :info:
For syntax cechking I'm using flycheck
*** Flycheck
=(global-flycheck-mode)= is already enabled in doom.
[[https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#flycheck-versus-flymake][Why not flymake ?]]
** Scheme
*** MIT
#+BEGIN_SRC emacs-lisp :tangle no
(setq geiser-mit-binary "/usr/bin/scheme")
(setq geiser-active-implementations '(mit))
(setq geiser-scheme-implementation 'mit)
(setq scheme-program-name "/usr/local/bin/mit-scheme")
(setq geiser-scheme-implementation 'mit)
(setq geiser-default-implementation 'mit)
#+END_SRC

** C++
*** Org default setup for C++
#+BEGIN_SRC emacs-lisp
(setq org-babel-default-header-args:C++ '((:includes . "<bits/stdc++.h>")
                                          (:flags . "-std=c++20")
                                          (:namespaces . "std")))
#+END_SRC
*** Error List
Run =(lsp-ui-flycheck-list)=
** C
*** Org default setup for C
#+BEGIN_SRC emacs-lisp
(setq org-babel-default-header-args:C '((:includes . "'(<stdio.h> <stdlib.h> <unistd.h> <time.h> <string.h>)")
                                        (:flags . "-std=c99")))
#+END_SRC


** Python
*** Keybindgins
Currently SPC [j k l] is empty for me
#+BEGIN_SRC emacs-lisp
(map! :leader
      "j r" 'python-shell-send-region
      "j b" 'python-shell-send-buffer
      "j d" 'python-shell-send-defun)
#+END_SRC
*** Error list
* Packages
** Company
*** Company Behaviour
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 0.35)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t);;Circular list
  (setq company-show-numbers t));; M-7 for 7nd match
#+END_SRC
*** Select with tab
#+BEGIN_SRC emacs-lisp
(after! company
  (define-key company-active-map (kbd "<tab>")
    #'company-complete-selection)
  (define-key company-active-map (kbd "TAB")
    #'company-complete-selection))
#+END_SRC

*** Company ui
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-tooltip-limit 10
        company-tooltip-minimum-width 80))
#+END_SRC

** TODO Treemacs
Add +treemacs-git-mode
#+BEGIN_SRC emacs-lisp
(setq doom-themes-treemacs-theme "doom-colors")
(doom-themes-treemacs-config)
#+END_SRC

** Command Log Mode
#+BEGIN_SRC emacs-lisp
(use-package command-log-mode)
#+END_SRC
** Artist Mode Right Click
#+BEGIN_SRC emacs-lisp
(eval-after-load "artist"
  '(define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation)
  )
#+END_SRC
** Pdf
*** Dark Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode) ;Dark mode
#+END_SRC
*** Latex Viewer
#+BEGIN_SRC emacs-lisp
(setq +latex-viewers '(pdf-tools))
#+END_SRC
*** org-file-apps
#+BEGIN_SRC emacs-lisp
(push '("\\.pdf\\'" . emacs) org-file-apps)
#+END_SRC
** Epub
#+BEGIN_SRC emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-save-place-file (concat doom-cache-dir "nov-places")))
#+END_SRC
** info-colors
#+BEGIN_SRC emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+END_SRC
** tools/rgb
*** hl-line-mode don't override rainbow
#+BEGIN_SRC elisp
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
#+END_SRC
*** TODO global rainbow mode
*** kurecolor functions
**** ++
kurecolor-increase-hue-by-step
kurecolor-increase-saturation-by-step
kurecolor-increase-brightness-by-step
**** --
kurecolor-decrease-hue-by-step
kurecolor-decrease-saturation-by-step
kurecolor-decrease-brightness-by-step
** tools/lsp
[[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][Lsp Features List]]
Doom emacs's defaults are good for me
*** Don't highlight same symbol
If I want to look at same symbol then I probably want to go there
`*` does this, also it highlight too
#+BEGIN_SRC emacs-lisp
(setq lsp-enable-symbol-highlighting nil)
#+END_SRC
*** Code Action
Code actions are lsp's way to fix code.
Can run with =(lsp-execute-code-action)= ,in doom emacs SPC c a
#+BEGIN_SRC emacs-lisp :tangle no
(setq lsp-modeline-code-actions-segments '(count icon name))
#+END_SRC
*** Breadcrumb :info:
Fancy way to show where you are in header
Run with =(lsp-headerline-breadcrumb-mode)=
*** lsp-treemacs
M-x =(lsp-treemacs-symbols)= for cool outline.
M-x =(lsp-treemacs-errors-list)= Fancier way than lsp-ui-sideline
*** lsp-ivy
Search through entire project(in headers too).
** ui/zen
*** Writeroom width limit
I generaly use lightrom for reading text-info manuals or manuals in one screen.
I don't need 80 column restriciton
#+BEGIN_SRC emacs-lisp
(setq  writeroom-width 80)
#+END_SRC
** completion/ivy
M-i for insert what you select.
~  for go home
// for go root
`  for narrow down to projectile
** tools/lookup
| SPC g f | Look for a file , named the word under cursor |
| SPC s O | Look online                                   |
** Delimcol
#+BEGIN_SRC emacs-lisp
(setq delimit-columns-str-before "{ ")
(setq delimit-columns-str-after " }")
(setq delimit-columns-str-separator ", ")
(setq delimit-columns-before "")
(setq delimit-columns-after "")
(setq delimit-columns-separator " ")
(setq delimit-columns-format 'separator)
(setq delimit-columns-extra t)

(map! :leader
      "j [" 'delimit-columns-region)
#+END_SRC
* Personal Packages
** Zeal
#+BEGIN_SRC emacs-lisp
(use-package zeal-at-point)
(map! :leader
      :desc "Zeal Look Up"
      "d z" #'zeal-at-point
      )
#+END_SRC
** Buffer Position Managment (framemove)
#+BEGIN_SRC emacs-lisp
(use-package! framemove
  :config
  (setq framemove-hook-into-windmove t))
#+END_SRC
** TODO Turkish Mode
#+BEGIN_SRC emacs-lisp
(use-package turkish)
(map! :leader
      :desc "Turkish last word"
      "d t" 'turkish-correct-last-word
      )
#+END_SRC
**  evil-visual-mark-mode
