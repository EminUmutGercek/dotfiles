#+TITLE: My doom configuration
#+AUTHOR: Emin Umut Gerçek
#+EMAIL: umutgercek1999@gmail.com

* Non doom
** Sane defaults for Emacs
Copy Pasted
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 tab-width 4
 uniquify-buffer-name-style 'forward
 window-combination-resize t
 x-stretch-cursor t)

(setq undo-limit 80000000
      evil-want-fine-undo t
      auto-save-default t
      inhibit-compacting-font-caches t
      truncate-string-ellipsis "…")

(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
** Maximize on boot
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src
* Doom
** Theme
I will handle this ugliness one day ...
*** Light & Dark
**** Day
#+begin_src emacs-lisp
(defun my/day-additonals ()
  (custom-set-faces!
    '(region     :background "#f5f5ff")
    '(org-block-begin-line :background "#fafaf8")
    '(org-block-end-line   :background "#fafaf8")))
#+end_src
**** Night
#+begin_src emacs-lisp
(defun my/night-additonals ()
  (interactive )
  (progn
    (custom-set-faces!
      '(region     :background "#094A5A")
      '(org-block-begin-line :background "#002b3a")
      '(org-block-end-line   :background "#002b3a"))

    (setq doom-solarized-dark-brighter-text t
          doom-solarized-dark-brighter-comments t
          doom-themes-enable-bold t)))
#+end_src
**** Find Day or Night
#+begin_src emacs-lisp
(setq my/current-time (string-to-number (format-time-string "%H")))

(defun my/day-or-night ()
  (if
      (and
       (< 5 my/current-time)
       (< my/current-time 20))
      'day
    'night))

(setq doom-theme (if (eq (my/day-or-night) 'day)
                     'doom-one-light
                   'doom-solarized-dark))

(if (eq (my/day-or-night) 'day)
    (my/day-additonals)
    (my/night-additonals))
#+end_src
** Font
*** Main fonts
#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "SauceCodePro Nerd Font" :size 17))
(setq doom-font (font-spec :family "SauceCodePro NF" :size 17)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 24))
;; doom-big-font (font-spec :family "Ubuntu" :size 24)
;; doom-serif-font (font-spec :family "Noto Serif SC" :size 24)
;; doom-variable-pitch-font (font-spec :family "Ubuntu" :size 17))
#+end_src
*** Enable bold and italic
#+begin_src emacs-lisp
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+end_src
** User Info
#+begin_src emacs-lisp
(setq user-full-name "Emin Umut Gerçek"
      user-mail-address "umutgercek1999@gmail.com")
#+end_src
** Better Defaults
#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
#+end_src
** Dashboard
#+begin_src emacs-lisp
(setq doom-scratch-buffer-major-mode t)

(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions 'doom-dashboard-widget-footer)
(remove-hook '+doom-dashboard-functions 'doom-dashboard-widget-loaded)

(setq fancy-splash-image "~/.doom.d/GnuLove.png")
#+end_src
* Org
** Rudimentary
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/Org")

(after! org
  (setq org-src-window-setup 'split-window-right))

(org-autolist-mode 1)

(setq org-log-done 'time)

(remove-hook! '(org-mode-hook text-mode-hook)
              #'display-line-numbers-mode)
#+end_src
** Org clock
#+begin_src emacs-lisp
(setq org-clock-persist t)
(org-clock-persistence-insinuate)
(setq org-clock-persist-query-resume nil)
#+end_src
** TODO Agenda
#+begin_src emacs-lisp
(setq org-agenda-files (directory-files-recursively "~/Dropbox/org/gtd/" "\\.org$"))

(use-package! org-super-agenda
  :commands (org-super-agenda-mode))
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil org-agenda-tags-column 100)

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Assignments"
                           :tag "Assignment"
                           :order 10)
                          (:name "Issues"
                           :tag "Issue"
                           :order 12)
                          (:name "Emacs"
                           :tag "Emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "Project"
                           :order 14)
                          (:name "Research"
                           :tag "Research"
                           :order 15)
                          (:name "To read"
                           :tag "Read"
                           :order 30)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "University"
                           :tag "uni"
                           :order 32)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
#+end_src
** KILL Old Capture
#+begin_src emacs-lisp :tangle no
(setq org-capture-templates '(
                              ("t" "Todo")
                              ("tn" "No time" entry
                               (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks")
                               "* TODO %^{Description} %^g\n  %?")
                              ("tt" "With time" entry
                               (file+headline "~/Dropbox/org/gtd/agenda.org" "Tasks")
                               "* TODO %^{Description} %^g\n \%^t\n  %?")


                              ("T" "Tickler" entry
                               (file+headline "~/Dropbox/org/gtd/tickler.org" "Tickler")
                               "* %i%? \n %U")

                              ("n" "Simple Notes" entry
                               (file+headline "~/Dropbox/org/gtd/inbox.org" "Notes")
                               "* %^{Description} %^g\n  %?")

                              ("j" "Journal" entry
                               (file+datetree "~/Dropbox/org/gtd/journal.org")
                               "* %U %?" :clock-in t :clock-keep t)

                              ("w" "Word" entry
                               (file+datetree "~/Dropbox/org/gtd/words.org")
                               "* %U %?" :clock-in t :clock-keep t)

                              ("l" "Log")

                              ("ls" "Log SICP/LISP daily" entry
                               (file+olp+datetree "~/Dropbox/org/gtd/log.org" "SICP")
                               "* %<%H:%M>\n%^{minute}p%^{page}p%?" :jump-to-captured t :immediate-finish t)

                              ("lu" "Log UNIX daily" entry
                               (file+olp+datetree "~/Dropbox/org/gtd/log.org" "UNIX")
                               "* %<%H:%M> %^{Topic}\n%^{minute|60}p" :immediate-finish t)

                              ("r" "Resource")

                              ("ri" "Internet" entry
                               (file+olp "~/Dropbox/org/gtd/inbox.org" "Resources" "Internet")
                               "* [[%c][%^{Name of link}]] %^g\n%U\n")))
#+end_src
** TODO Capture
#+begin_src emacs-lisp
(setq org-capture-templates '(("t" "Todo")
                              ("tn" "No time" entry
                               (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks")
                               "* TODO %^{Description} %^g\n  %?")
                              ("tt" "With time" entry
                               (file+headline "~/Dropbox/org/gtd/agenda.org" "Tasks")
                               "* TODO %^{Description} %^g\n \%^t\n  %?")

                              ("T" "Tickler" entry
                               (file+headline "~/Dropbox/org/gtd/tickler.org" "Tickler")
                               "* %i%? \n %U")

                              ("j" "Journal" entry
                               (file+datetree "~/Dropbox/org/gtd/journal.org")
                               "* %U %?" :clock-in t :clock-keep t)

                              ("l" "Log")

                              ("ls" "Log SICP daily" entry
                               (file+olp+datetree "~/Dropbox/org/gtd/sicp.org" "Log")
                               "* %<%H:%M>\n%^{minute}p%^{page}p%^{current-page}p%?" :jump-to-captured t :immediate-finish t)

                              ("lu" "Log UNIX daily" entry
                               (file+olp+datetree "~/Dropbox/org/gtd/log.org" "UNIX")
                               "* %<%H:%M> %^{Topic}\n%^{minute|60}p" :immediate-finish t)

                              ("r" "Resource")

                              ("ri" "Internet" entry
                               (file+olp "~/Dropbox/org/gtd/inbox.org" "Resources" "Internet")
                               "* [[%c][%^{Name of link}]] %^g\n%U\n")))
#+end_src
** org-download
https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/
#+begin_src emacs-lisp
(defun zz/org-download-paste-clipboard (&optional use-default-filename)
  (interactive "P")
  (require 'org-download)
  (let ((file
         (if (not use-default-filename)
             (read-string (format "Filename [%s]: " org-download-screenshot-basename)
                          nil nil org-download-screenshot-basename)
           nil)))
    (org-download-clipboard file)))

(after! org
  (setq org-download-method 'directory)
  (setq org-download-image-dir "~/Documents/Assets/Download")
  (setq org-download-heading-lvl nil)
  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-image-actual-width 750)
  (map! :map org-mode-map
        "C-c l a y" #'zz/org-download-paste-clipboard
        "C-M-y" #'zz/org-download-paste-clipboard))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(map! :leader
      :desc "Insert image from clipboard to org"
      "e p" 'zz/org-download-paste-clipboard)
#+end_src
** Visual
*** Pretty Entities
It also hides emphasis markers?
#+begin_src emacs-lisp
(setq org-pretty-entities t)
#+end_src
*** Subscript and Superscript
If really want to display inline in org mode use _{} syntax
#+begin_src emacs-lisp
;; (setq org-use-sub-superscripts '{})
(setq org-use-sub-superscripts nil)
#+end_src
*** Emphasis markers
**** Hide them
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src
**** Org emphasis list
#+begin_src emacs-lisp
(setq org-emphasis-alist
      '(("*" bold)
        ("/" italic)
        ("_" underline)
        ("=" org-verbatim verbatim)
        ("~" org-code verbatim)))
;; ("+" (:strike-through t))))
#+end_src
**** WAIT Unhide emphasis interactively
#+begin_src emacs-lisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode))
#+end_src
*** Org pretty tables
#+begin_src emacs-lisp :tangle no
(require 'org-pretty-table)
(add-hook 'org-mode-hook (lambda () (org-pretty-table-mode)))
#+end_src
*** Pretty Symbols
#+begin_src emacs-lisp
(defun org-pretty-symbols-mode ()
  ;; (push '("[ ]" .  "☐") prettify-symbols-alist)
  ;; (push '("[X]" . "☑" ) prettify-symbols-alist)

  (push '("#+begin_src"      . "λ") prettify-symbols-alist)
  (push '("#+end_src"        . "・") prettify-symbols-alist)
  (push '("#+results:"       . "»") prettify-symbols-alist)
  (push '(":end:"            . "⋱") prettify-symbols-alist)
  (push '(":results:"        . "⋰") prettify-symbols-alist)
  (push '("#+begin_verbatim" . "∬") prettify-symbols-alist)
  (push '("#+end_verbatim"   . "∯") prettify-symbols-alist)
  (push '("#+begin_verse"    . "∭") prettify-symbols-alist)
  (push '("#+end_verse"      . "∰") prettify-symbols-alist)
  (push '("#+begin_quote"    . "") prettify-symbols-alist)
  (push '("#+end_quote"      . "") prettify-symbols-alist)
  ;;               Capital
  (push '("#+BEGIN_SRC"      . "λ") prettify-symbols-alist)
  (push '("#+END_SRC"        . "⋱") prettify-symbols-alist)
  (push '("#+END_SRC"        . "・") prettify-symbols-alist)
  (push '("#+RESULTS:"       . "»") prettify-symbols-alist)
  (push '(":END:"            . "⋱") prettify-symbols-alist)
  (push '(":RESULTS:"        . "⋰") prettify-symbols-alist)
  (push '("#+BEGIN_VERBATIM" . "∬") prettify-symbols-alist)
  (push '("#+END_VERBATIM"   . "∯") prettify-symbols-alist)
  (push '("#+BEGIN_VERSE"    . "∭") prettify-symbols-alist)
  (push '("#+END_VERSE"      . "∰") prettify-symbols-alist)
  (push '("#+BEGIN_QUOTE"    . "") prettify-symbols-alist)
  (push '("#+END_QUOTE"      . "") prettify-symbols-alist)
  (prettify-symbols-mode t))

(add-hook 'org-mode-hook (lambda () (org-pretty-symbols-mode)))
#+end_src
** [#A] Keybindings
#+begin_src emacs-lisp
(map! :leader
      :desc "org-ctrl-c-star copy"
      "8" 'org-ctrl-c-star)
#+end_src
** Latex
*** Visual
**** Please bigger latex preview
Or glasses :(
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
#+end_src
**** Toggle fragments
#+begin_src emacs-lisp
(use-package! org-fragtog)
;; :hook (org-mode . org-fragtog-mode))
#+end_src
*** Pretty Syntax Highlight for Source Code
You need [[https://pypi.org/project/Pygments/][Pygemnts]]
Snippet is [[https://stackoverflow.com/questions/21005885/export-org-mode-code-block-and-result-with-different-styles][From]]
#+begin_src emacs-lisp
(setq org-latex-listings 'minted)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src
** Export
*** TeX-like syntax
Don't interpret every _ subscript!

| F_1   | ❌ |
| F_{1} | ✔  |
#+begin_src emacs-lisp
(setq org-export-with-sub-superscripts '{})
#+end_src
*** Increase Exported Headline Level
#+begin_src emacs-lisp
(setq org-export-headline-levels 6)
#+end_src
** Macros
*** Insert order of picture
#+begin_src emacs-lisp
(defun my/insert-picture-order()
  "Insert order of picture"
  (interactive)
  (setq current-cursor (point))
  (setq x 0)
  (while (re-search-forward "file:Pictures" nil t -1)
    (setq x (+ x 1)))
  (setq x (- x 1))
  (goto-char current-cursor)
  x)
#+end_src
*** Insert code block from file
[[https://orgmode.org/manual/Include-Files.html][Link from manual]]
| ‘#+INCLUDE: "~/.emacs" :lines "5-10"’ | Include lines 5 to 10, 10 excluded |
| ‘#+INCLUDE: "~/.emacs" :lines "-10"’  | Include lines 1 to 10, 10 excluded |
| ‘#+INCLUDE: "~/.emacs" :lines "10-"’  | Include lines from 10 to EOF       |

#+begin_src emacs-lisp
(defun my/include-file-lines-org-mode (file-name src-lang begin end)
  "Insert file's lines as source block ing org mode"
  (setq real-end (+ end 1))
  (setq line-string (format "%d-%d" begin real-end))
  (format "#+include: %s :lines %s :src %s" file-name line-string src-lang ))
(my/include-file-lines-org-mode "./New.cpp" "C++" 5 10)
#+end_src
** PROJ Automatically close emphasis markers
[[https://www.emacswiki.org/emacs/ElectricPair][From]]
#+begin_src emacs-lisp :tangle no
(defun electric-pair ()
  "If at end of line, insert character pair without surrounding spaces.
    Otherwise, just insert the typed character."
  (interactive)
  (if (eolp) (let (parens-require-spaces) (insert-pair)) (self-insert-command 1)))

(add-hook 'org-mode-hook
          (lambda ()
            (define-key org-mode-map "=" 'electric-pair)
            (define-key org-mode-map "~" 'electric-pair)
            (define-key org-mode-map "_" 'electric-pair)
            (define-key org-mode-map "*" 'electric-pair)
            (define-key org-mode-map "/" 'electric-pair)))
#+end_src

* Translator
** KILL Google Translate
#+begin_src emacs-lisp :tangle no
(use-package google-translate
  :custom
  (google-translate-backend-method 'curl)
  (google-translate-default-source-language "en")
  (google-translate-default-target-language "tr")
  :config
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))
(map! :leader
      :desc "Translate word"
      "d l" 'google-translate-at-point)
#+end_src
* Bookmark like
** notes
#+begin_src emacs-lisp
(map! :leader
      :desc "Go to notes directory"
      "a n" 'my/notes-counsel-find-file
      )

(defun my/notes-counsel-find-file ()
  "Foobar"
  (interactive)
  (counsel-find-file "/home/umut/Dropbox/org/Notes"))
#+end_src
** gtd
#+begin_src emacs-lisp
(defun my/gtd-counsel-find-file ()
  "Foobar"
  (interactive)
  (counsel-find-file "/home/umut/Dropbox/org/gtd"))

(map! :leader
      :desc "Go to notes directory"
      "a g" 'my/gtd-counsel-find-file
      )
#+end_src
** src
#+begin_src emacs-lisp
(defun my/src-counsel-find-file ()
  "Foobar"
  (interactive)
  (counsel-find-file "/home/umut/src/"))

(map! :leader
      :desc "Go to notes directory"
      "a s" 'my/src-counsel-find-file
      )
#+end_src
** documents
#+begin_src emacs-lisp
(defun my/documents-counsel-find-file ()
  "Foobar"
  (interactive)
  (counsel-find-file "/home/umut/Document/"))

(map! :leader
      :desc "Go to documents directory"
      "a d" 'my/documents-counsel-find-file
      )
#+end_src
* Functions
** Mine
*** TODO Curly to Normal Quote
One day fix this too...
#+begin_src emacs-lisp
(defun my/curly-quoation-to-normal-quoation()
  "Change any curly quotation mark to normal quoation mark"
  (interactive)
  (goto-char (point-min))
  (while (search-forward "'" nil t)
    (replace-match "'"))
  (goto-char (point-min))
  (while (search-forward "'" nil t)
    (replace-match "'"))

  (goto-char (point-min))
  (while (search-forward """ nil t)
    (replace-match "\""))

  (goto-char (point-min))
  (while (search-forward """ nil t)
    (replace-match "\""))
  )
#+end_src
*** TODO Debug Functions
#+begin_src emacs-lisp
(defun my/error-line ()
  "Create an error message in C++"
  (interactive)
  (move-beginning-of-line nil)
  (insert "std::cout << \"Error:\" << __LINE__ << std::endl;"))

(map! :leader
      :desc "Create an error message in C++"
      "d e" 'my/error-line)
#+end_src
*** Open a directory
#+begin_src emacs-lisp
(defun my/open-directory ()
  "Opens a folder with xdg-open"
  (interactive)
  (shell-command "xdg-open ."))
#+end_src
*** TODO Org Table y n
Very hacky but it works.
#+begin_src emacs-lisp
(defun my/org-table-color-y-n (start end)
  "Make =y= s green and n s red with =y= and ~n~"
  (interactive "r")
  (replace-regexp " y " " =y= " nil start end)
  (replace-regexp " n " " ~n~ " nil start end))
#+end_src
*** Just one space in region
https://stackoverflow.com/questions/8674912/how-to-collapse-whitespaces-in-a-region
#+begin_src emacs-lisp
(defun my/just-one-space-in-region (beg end)
  "replace all whitespace in the region with single spaces"
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (while (re-search-forward "\\s-+" nil t)
        (replace-match " ")))))

(map! :leader
      :desc "Go to documents directory"
      "j s" 'my/my/just-one-space-in-region)
#+end_src
*** Multiply With Two
#+begin_src emacs-lisp
(defun my/*2 ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (* (string-to-number (match-string 0) 2)))))
#+end_src
*** Divide With Two
#+begin_src emacs-lisp
(defun my//2 ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (/ (string-to-number (match-string 0)) 2))))
#+end_src
*** Org mode
**** PROJ Info to Org
***** Heading
#+begin_src emacs-lisp
(defun my/info->org-heading()
  "Simple workflow for reading info in emasc while taking notes on
  org-mode"
  (interactive)
  (fm-right-frame)
  (goto-char (point-max))
  (insert (substring-no-properties (car kill-ring)))
  (forward-line -1)
  (kill-whole-line)
  (forward-line -1)
  (org-ctrl-c-star)
  (fm-left-frame))


(map! :leader
      "j o" 'my/info->org-heading)
#+end_src
***** Text
#+begin_src emacs-lisp
(defun my/info->org-text(beginning end)
  "Simple workflow for reading info in emasc while taking notes on
  org-mode"
  (interactive "r")
  (fm-right-frame)
  (goto-char (point-max))
  (insert (substring-no-properties (car kill-ring)))
  (insert "\n")
  (fm-left-frame))

(map! :leader
      "j f" 'my/info->org-text)
#+end_src
** xah lee
*** Title Case
#+begin_src emacs-lisp
(defun xah-title-case-region-or-line (@begin @end)
  "Title case text between nearest brackets, or current line, or text selection.
Capitalize first letter of each word, except words like {to, of, the, a, in, or, and, …}. If a word already contains cap letters such as HTTP, URL, they are left as is.

When called in a elisp program, *begin *end are region boundaries.
URL `http://ergoemacs.org/emacs/elisp_title_case_text.html'
Version 2017-01-11"
  (interactive
   (if (use-region-p)
       (list (region-beginning) (region-end))
     (let (
           $p1
           $p2
           ($skipChars "^\"<>(){}[]""''‹›«»「」『』【】〖〗《》〈〉〔〕"))
       (progn
         (skip-chars-backward $skipChars (line-beginning-position))
         (setq $p1 (point))
         (skip-chars-forward $skipChars (line-end-position))
         (setq $p2 (point)))
       (list $p1 $p2))))
  (let* (
         ($strPairs [
                     [" A " " a "]
                     [" And " " and "]
                     [" At " " at "]
                     [" As " " as "]
                     [" By " " by "]
                     [" Be " " be "]
                     [" Into " " into "]
                     [" In " " in "]
                     [" Is " " is "]
                     [" It " " it "]
                     [" For " " for "]
                     [" Of " " of "]
                     [" Or " " or "]
                     [" On " " on "]
                     [" Via " " via "]
                     [" The " " the "]
                     [" That " " that "]
                     [" To " " to "]
                     [" Vs " " vs "]
                     [" With " " with "]
                     [" From " " from "]
                     ["'S " "'s "]
                     ["'T " "'t "]
                     ]))
    (save-excursion
      (save-restriction
        (narrow-to-region @begin @end)
        (upcase-initials-region (point-min) (point-max))
        (let ((case-fold-search nil))
          (mapc
           (lambda ($x)
             (goto-char (point-min))
             (while
                 (search-forward (aref $x 0) nil t)
               (replace-match (aref $x 1) "FIXEDCASE" "LITERAL")))
           $strPairs))))))

(map! :leader
      "j t"  'xah-title-case-region-or-line)
#+end_src
* Languages
** KILL C/C++
#+begin_src emacs-lisp :tangle no
(defun my-compile-run ()
  (interactive)
  (save-buffer)
  (if (get-buffer "vterm")
      (setq cur-term "vterm")
    (setq cur-term "*doom:vterm-popup:main*")
    )
  (comint-send-string cur-term
                      (concat "clear"
                              "\n"
                              "g++ *.cpp"
                              ";"
                              "./a.out"
                              "\n")))

(defun my-compile-run-with-test ()
  (interactive)
  (save-buffer)
  (if (get-buffer "vterm")
      (setq cur-term "vterm")
    (setq cur-term "*doom:vterm-popup:main*")
    )
  (comint-send-string cur-term (concat "clear"
                                       "\n"
                                       "g++ "
                                       (buffer-name)
                                       ";"
                                       "./a.out"
                                       "<test"
                                       "\n")))

(map! :leader
      :desc "Compile and Run in vterm buffer"
      "d c"  'my-compile-run
      "d t"  'my-compile-run-with-test
      )
#+end_src
** Notes :info:
For syntax checking I'm using flycheck
*** Flycheck
=(global-flycheck-mode)= is already enabled in doom.
[[https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#flycheck-versus-flymake][Why not flymake ?]]
** Scheme
*** MIT
#+begin_src emacs-lisp :tangle no
(setq geiser-mit-binary "/usr/bin/scheme")
(setq geiser-active-implementations '(mit))
(setq geiser-scheme-implementation 'mit)
(setq scheme-program-name "/usr/local/bin/mit-scheme")
(setq geiser-scheme-implementation 'mit)
(setq geiser-default-implementation 'mit)
#+end_src

** C++
*** Org default setup for C++
#+begin_src emacs-lisp
(setq org-babel-default-header-args:C++ '((:includes . "<bits/stdc++.h>")
                                          (:flags . "-std=c++20")
                                          (:namespaces . "std")))
#+end_src
*** Error List
Run =(lsp-ui-flycheck-list)=
** C
*** Org default setup for C
#+begin_src emacs-lisp
(setq org-babel-default-header-args:C '((:includes . "'(<stdio.h> <stdlib.h> <unistd.h> <time.h> <string.h>)")
                                        (:flags . "-std=c99")))
#+end_src
** Python
*** Keybindings
Currently SPC [j k l] is empty for me
#+begin_src emacs-lisp
(map! :leader
      "j r" 'python-shell-send-region
      "j b" 'python-shell-send-buffer
      "j d" 'python-shell-send-defun)
#+end_src
* Packages
** Doom Packages
Category from init.el
*** completion
**** company
***** Company Behaviour
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t);;Circular list
  (setq company-show-numbers t));; M-7 for 7nd match
#+end_src
***** Select with tab
#+begin_src emacs-lisp
(after! company
  (define-key company-active-map (kbd "<tab>")
    #'company-complete-selection)
  (define-key company-active-map (kbd "TAB")
    #'company-complete-selection))
#+end_src

***** Company ui
#+begin_src emacs-lisp
(after! company
  (setq company-tooltip-limit 10
        company-tooltip-minimum-width 80))
#+end_src

**** TODO ivy
M-i for insert what you select.
~  for go home
// for go root
`  for narrow down to projectile
*** ui
**** zen
***** Writeroom width limit
I generally use lightroom for reading text-info manuals or manuals in one screen.
I don't need 80 column restriction.
#+begin_src emacs-lisp
(setq  writeroom-width 80)
#+end_src
***** Change hook
#+begin_src emacs-lisp
(setq writeroom-mode-hook
      '(writeroom-mode-set-explicitly
        +zen-enable-mixed-pitch-mode-h))
#+end_src
**** TODO Treemacs
Add +treemacs-git-mode
#+begin_src emacs-lisp
(setq doom-themes-treemacs-theme "doom-colors")
(doom-themes-treemacs-config)
#+end_src
**** modeline
***** Github
#+begin_src emacs-lisp
(setq doom-modeline-github t)
(setq doom-modeline-github-interval 30)
#+end_src
*** editor
**** evil
#+begin_src emacs-lisp
(setq +evil-want-o/O-to-continue-comments nil)

(after! evil-snipe
  (setq evil-snipe-scope 'visible)
  (setq evil-snipe-repeat-scope 'buffer)
  (setq evil-snipe-spillover-scope 'whole-buffer))
#+end_src
***** Proper way to deal with long lines
[[https://github.com/hlissner/doom-emacs/issues/401][Write in init.el]]
#+begin_src emacs-lisp :tangle no
(setq evil-respect-visual-line-mode t)
#+end_src
**** rotate-text
Use =] r= for rotate
**** snippets
***** Nested snippets
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src
*** emacs
**** dired
***** Continuous Preview
#+begin_src emacs-lisp
(map!
 (:after dired
  (:map dired-mode-map
   :n "RET" 'dired-find-alternate-file ;;Open in same bufer
   "-"   'find-alternate-file)
  "C-x i" #'peep-dired))

(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src
***** Hide dotfiles
#+begin_src emacs-lisp
(use-package! dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (map! :map dired-mode-map
        :n "H" #'dired-hide-dotfiles-mode))
#+end_src
*** checkers
#+begin_src emacs-lisp :tangle no
(setq ispell-local-dictionary "en")
#+end_src

#+begin_src shell :tangle no :eval no
rm .emacs.d/.local/etc/ispell/.pws
#+end_src

*** tools
**** rgb
***** hl-line-mode don't override rainbow
#+begin_src elisp
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
#+end_src
***** TODO global rainbow mode
***** kurecolor functions
****** ++
kurecolor-increase-hue-by-step
kurecolor-increase-saturation-by-step
kurecolor-increase-brightness-by-step
****** --
kurecolor-decrease-hue-by-step
kurecolor-decrease-saturation-by-step
kurecolor-decrease-brightness-by-step
**** lsp
[[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][Lsp Features List]]
Doom emacs's defaults are good for me
***** Don't highlight same symbol
If I want to look at same symbol then I probably want to go there
`*` does this, also it highlight too
#+begin_src emacs-lisp
(setq lsp-enable-symbol-highlighting nil)
#+end_src
***** Code Action
Code actions are lsp's way to fix code.
Can run with =(lsp-execute-code-action)= ,in doom emacs SPC c a
#+begin_src emacs-lisp :tangle no
(setq lsp-modeline-code-actions-segments '(count icon name))
#+end_src
***** Breadcrumb :info:
Fancy way to show where you are in header
Run with =(lsp-headerline-breadcrumb-mode)=
***** lsp-treemacs
M-x =(lsp-treemacs-symbols)= for cool outline.
M-x =(lsp-treemacs-errors-list)= Fancier way than lsp-ui-sideline
***** lsp-ivy
Search through entire project(in headers too).
**** lookup
| SPC g f | Look for a file , named the word under cursor |
| SPC s O | Look online                                   |
**** Pdf
***** Dark Mode
#+begin_src emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode) ;Dark mode
#+end_src
***** Latex Viewer
#+begin_src emacs-lisp
(setq +latex-viewers '(pdf-tools))
#+end_src
***** org-file-apps
#+begin_src emacs-lisp
(push '("\\.pdf\\'" . emacs) org-file-apps)
#+end_src
***** Look up documentation
Function name + ( will show arguments in modeline + can enter them with tab.
Just press ~K~ =(lsp-describe-thing-at-point)= for documentation.
** Personal Packages
*** Zeal
#+begin_src emacs-lisp
(use-package zeal-at-point)
(map! :leader
      :desc "Zeal Look Up"
      "j z" #'zeal-at-point)
#+end_src
*** Buffer Position Managment (framemove)
#+begin_src emacs-lisp
(use-package! framemove
  :config
  (setq framemove-hook-into-windmove t))
#+end_src
*** TODO Turkish Mode
#+begin_src emacs-lisp
(use-package turkish)
(map! :leader
      :desc "Turkish last word"
      "d t" 'turkish-correct-last-word)
#+end_src
*** info-colors
Make info more readable with syntax highlight at least for elisp.
#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+end_src
*** Command Log Mode
#+begin_src emacs-lisp
(use-package! command-log-mode)
#+end_src
*** Epub
#+begin_src emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-save-place-file (concat doom-cache-dir "nov-places")))
#+end_src
*** rotate
Use =rotate-window= and =rotate-layout=
*** Convert every other file to .org
#+begin_src emacs-lisp
(use-package! org-pandoc-import :after org)
#+end_src
*** eww syntax highlight
https://github.com/andreasjansson/language-detection.el#eww-syntax-highlighting
#+begin_src emacs-lisp
(require 'cl-lib)

(defun eww-tag-pre (dom)
  (let ((shr-folding-mode 'none)
        (shr-current-font 'default))
    (shr-ensure-newline)
    (insert (eww-fontify-pre dom))
    (shr-ensure-newline)))

(defun eww-fontify-pre (dom)
  (with-temp-buffer
    (shr-generic dom)
    (let ((mode (eww-buffer-auto-detect-mode)))
      (when mode
        (eww-fontify-buffer mode)))
    (buffer-string)))

(defun eww-fontify-buffer (mode)
  (delay-mode-hooks (funcall mode))
  (font-lock-default-function mode)
  (font-lock-default-fontify-region (point-min)
                                    (point-max)
                                    nil))

(defun eww-buffer-auto-detect-mode ()
  (let* ((map '((ada ada-mode)
                (awk awk-mode)
                (c c-mode)
                (cpp c++-mode)
                (clojure clojure-mode lisp-mode)
                (csharp csharp-mode java-mode)
                (css css-mode)
                (dart dart-mode)
                (delphi delphi-mode)
                (emacslisp emacs-lisp-mode)
                (erlang erlang-mode)
                (fortran fortran-mode)
                (fsharp fsharp-mode)
                (go go-mode)
                (groovy groovy-mode)
                (haskell haskell-mode)
                (html html-mode)
                (java java-mode)
                (javascript javascript-mode)
                (json json-mode javascript-mode)
                (latex latex-mode)
                (lisp lisp-mode)
                (lua lua-mode)
                (matlab matlab-mode octave-mode)
                (objc objc-mode c-mode)
                (perl perl-mode)
                (php php-mode)
                (prolog prolog-mode)
                (python python-mode)
                (r r-mode)
                (ruby ruby-mode)
                (rust rust-mode)
                (scala scala-mode)
                (shell shell-script-mode)
                (smalltalk smalltalk-mode)
                (sql sql-mode)
                (swift swift-mode)
                (visualbasic visual-basic-mode)
                (xml sgml-mode)))
         (language (language-detection-string
                    (buffer-substring-no-properties (point-min) (point-max))))
         (modes (cdr (assoc language map)))
         (mode (cl-loop for mode in modes
                        when (fboundp mode)
                        return mode)))
    (message (format "%s" language))
    (when (fboundp mode)
      mode)))

(setq shr-external-rendering-functions
      '((pre . eww-tag-pre)))
#+end_src
*** Make keybindings more efficent
#+begin_src emacs-lisp
(use-package! keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src
*** TODO Fold source code like org mode
#+begin_src emacs-lisp
(use-package! outshine)
#+end_src
*** Edit browser's text from Emacs
#+begin_src emacs-lisp
(use-package! atomic-chrome
  :config
  (atomic-chrome-start-server))
#+end_src

** Other
*** Delimcol
#+begin_src emacs-lisp
(setq delimit-columns-str-before "{ ")
(setq delimit-columns-str-after " }")
(setq delimit-columns-str-separator ", ")
(setq delimit-columns-before "")
(setq delimit-columns-after "")
(setq delimit-columns-separator " ")
(setq delimit-columns-format 'separator)
(setq delimit-columns-extra t)

(map! :leader
      "j [" 'delimit-columns-region)
#+end_src

**** Usage
1. Use ~my/just-one-space-region~
2. Select region then use it
#+begin_example
1 2 3 4 5
{ 1, 2, 3, 4, 5 }
#+end_example

*** Artist Mode Right Click
#+begin_src emacs-lisp
(eval-after-load "artist"
  '(define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation))
#+end_src
*** Rainbow Delimiters
#+begin_src emacs-lisp
(setq rainbow-delimiters-max-face-count 9)
#+end_src
*** Which Key
Too much evil
#+begin_src emacs-lisp
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src

* GDB Debugger
** Variables
#+begin_src emacs-lisp
(setq gdb-many-windows t)
(setq gdb-show-main t)
(add-hook 'gud-mode-hook
          (lambda ()
            (tool-bar-mode 1)
            (gud-tooltip-mode)))
#+end_src
** Simple quit function from debugger
#+begin_src emacs-lisp
(defun my/gud-quit ()
  (interactive)
  (tool-bar-mode -1)
  (let ((kill-buffer-query-functions nil))
    (switch-to-buffer "*gud-a.out*")
    (kill-buffer-and-window))
  (gud-basic-call "quit"))
#+end_src
** Fringe
This is for proper breakpoints.
#+begin_src emacs-lisp
(set-fringe-style (quote (24 . 24)))
#+end_src
** Tips
*** For more buffers to display
M-x ~gdb-display-buffertype~
M-x ~gdb-frame-buffertype-buffer~
*** When Broke Layout
M-x ~gdb-restore-windows~
*** Breakpoints on Source File
| mouse-1   | Toggle Breakpoint  |
| C-mouse-1 | Enable/Disable     |
| mouse-3   | Continue execution |
| C-mouse-3 | Jump to line       |
*** Breakpoints Buffer
| SPC     | Enable/Disable |
| D       | Delete         |
| RET     | Go to line     |
| mouse-2 | Go to line     |
*** Stack Buffer
You can click stacks and see their locals.
*** Locales Buffer
Can look at simple variables directly.
To look at array or struct use (gud-watch).
Can enter new value with mouse-2 or RET

* Syntax highlight for common CLI programs
I will implement these in time with consistent color scheme between different programs.
** nmap
#+begin_src emacs-lisp
(use-package! nmap)
#+end_src
* Keybindings
#+begin_src emacs-lisp
(map! :leader
      :desc "Insert image from clipboard to org"
      "x" 'org-capture
      "X" 'doom/open-scratch-buffer
      "jj" 'org-ctrl-c-ctrl-c)
#+end_src

** Text Edit
#+begin_src emacs-lisp
(map!
    :n "M-k" #'drag-stuff-up
    :n "M-j" #'drag-stuff-down)
#+end_src
** Identifier name wars
#+begin_src emacs-lisp
(use-package! string-inflection
  :config
  (map! :leader
        "ec" 'string-inflection-all-cycle))
#+end_src
* RSS
** Keybindings
[[https://github.com/emacs-evil/evil-collection/blob/f2be91297029ae002d15e23510f9f686d848d7a8/modes/elfeed/evil-collection-elfeed.el][Look]]
Most important ones for me.
| =U=         | Unread          |
| =RET=       | Open in Emacs   |
| =S-RET=  =go= | Open in Browser |
| =s=         | Filter          |
** Delete sources
#+begin_src shell :eval no :tangle no
rm -rf ~/.emacs.d/.local/elfeed
#+end_src
** =elfeed-org-files=
#+begin_src emacs-lisp
(setq rmh-elfeed-org-files
      '("~/Dropbox/rss.org"))
#+end_src
** Elfeed goodies
#+begin_src emacs-lisp
(use-package! elfeed-goodies)
(elfeed-goodies/setup)
#+end_src
** Visual
Right [[https://tecosaur.github.io/emacs-config/config.html#visual-enhancements][from]]
#+begin_src emacs-lisp
(after! elfeed

  (elfeed-org)
  (use-package! elfeed-link)

  (setq elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function '+rss/elfeed-search-print-entry
        elfeed-search-title-min-width 80
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
        shr-max-image-proportion 0.6)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.5)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (defface elfeed-show-author-face `((t (:weight light)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (set-face-attribute 'elfeed-search-title-face nil
                      :foreground 'nil
                      :weight 'light)

  (defadvice! +rss-elfeed-wrap-h-nicer ()
    "Enhances an elfeed entry's readability by wrapping it to a width of
`fill-column' and centering it with `visual-fill-column-mode'."
    :override #'+rss-elfeed-wrap-h
    (setq-local truncate-lines nil
                shr-width 120
                visual-fill-column-center-text t
                default-text-properties '(line-height 1.1))
    (let ((inhibit-read-only t)
          (inhibit-modification-hooks t))
      (visual-fill-column-mode)
      ;; (setq-local shr-current-font '(:family "Merriweather" :height 1.2))
      (set-buffer-modified-p nil)))

  (defun +rss/elfeed-search-print-entry (entry)
    "Print ENTRY to the buffer."
    (let* ((elfeed-goodies/tag-column-width 40)
           (elfeed-goodies/feed-source-column-width 30)
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat (mapconcat 'identity tags ",")))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                           elfeed-goodies/tag-column-width 4))

           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp (length tags-str)
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :left))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left)))

      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
      (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
      (insert (propertize title 'face title-faces 'kbd-help title))
      (setq-local line-spacing 0.2)))

  (defun +rss/elfeed-show-refresh--better-style ()
    "Update the buffer to match the selected entry, using a mail-style."
    (interactive)
    (let* ((inhibit-read-only t)
           (title (elfeed-entry-title elfeed-show-entry))
           (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
           (author (elfeed-meta elfeed-show-entry :author))
           (link (elfeed-entry-link elfeed-show-entry))
           (tags (elfeed-entry-tags elfeed-show-entry))
           (tagsstr (mapconcat #'symbol-name tags ", "))
           (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
           (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
           (type (elfeed-entry-content-type elfeed-show-entry))
           (feed (elfeed-entry-feed elfeed-show-entry))
           (feed-title (elfeed-feed-title feed))
           (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
      (erase-buffer)
      (insert "\n")
      (insert (format "%s\n\n" (propertize title 'face 'elfeed-show-title-face)))
      (insert (format "%s\t" (propertize feed-title 'face 'elfeed-search-feed-face)))
      (when (and author elfeed-show-entry-author)
        (insert (format "%s\n" (propertize author 'face 'elfeed-show-author-face))))
      (insert (format "%s\n\n" (propertize nicedate 'face 'elfeed-log-date-face)))
      (when tags
        (insert (format "%s\n"
                        (propertize tagsstr 'face 'elfeed-search-tag-face))))
      ;; (insert (propertize "Link: " 'face 'message-header-name))
      ;; (elfeed-insert-link link link)
      ;; (insert "\n")
      (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
               do (insert (propertize "Enclosure: " 'face 'message-header-name))
               do (elfeed-insert-link (car enclosure))
               do (insert "\n"))
      (insert "\n")
      (if content
          (if (eq type 'html)
              (elfeed-insert-html content base)
            (insert content))
        (insert (propertize "(empty)\n" 'face 'italic)))
      (goto-char (point-min))))

  )
#+end_src
