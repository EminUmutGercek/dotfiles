#+TITL  E: Config
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no
#+TODO: TODO NONEED | DONE
#+STARTUP: overview

* TODO Previous Next Buffer
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "My previous buffer"
      "d h" 'switch-to-next-buffer
      :desc "My next buffer"
      "d l" 'switch-to-prev-buffer
      )
#+END_SRC
* Better Default
** Musts
#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t
  tab-width 4
   uniquify-buffer-name-style 'forward
    window-combination-resize t
	 x-stretch-cursor t)

(setq undo-limit 80000000
      evil-want-fine-undo t
	        auto-save-default t
			      inhibit-compacting-font-caches t
				        truncate-string-ellipsis "â€¦"
						      display-line-numbers-type 'relative)
(global-subword-mode 1)

#+END_SRC
** Fullscreen
#+BEGIN_SRC emacs-lisp
(if (eq initial-window-system 'x)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC
** Customize File
#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC
** Projectile Directory
#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/src/"))
#+END_SRC
* Doom
** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Umut Gercek"
      user-mail-address "umutgercek1999@gmail.com")
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-solarized-light)
;(setq doom-solarized-dark-brighter-text t)
#+END_SRC
** TODO No Fundemental Mode
Must add org mode
#+BEGIN_SRC emacs-lisp
(setq doom-scratch-buffer-major-mode t)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 16 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 15))
#+END_SRC

** TODO No bye message
#+BEGIN_SRC elisp
(setq confirm-kill-emacs nil)
#+END_SRC
** Dashboard
*** No menu
#+BEGIN_SRC emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions 'doom-dashboard-widget-footer)
(remove-hook '+doom-dashboard-functions 'doom-dashboard-widget-loaded)
#+END_SRC
*** GnuLove
#+BEGIN_SRC emacs-lisp
(setq fancy-splash-image "~/.doom.d/GnuLove.png")
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
#+END_SRC
** TODO C-h fix
#+BEGIN_SRC emacs-lisp
(after! org-mode
  (unmap! '(motion) "C-h")
  )
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp
;; (use-package evil
;;   :custom
;;   evil-disable-insert-state-bindings t
;;   )
#+END_SRC
** Don't respect comments
#+BEGIN_SRC emacs-lisp
(setq +evil-want-o/O-to-continue-comments nil)
#+END_SRC
** Evil Snipe
#+BEGIN_SRC emacs-lisp
(after! evil-snipe
  (setq dene "foo")
  (setq evil-snipe-scope 'visible)
  (setq evil-snipe-repeat-scope 'buffer)
  (setq evil-snipe-spillover-scope 'whole-buffer))
#+END_SRC
** TODO Evil Args
[a and ]a it useless
* company
** Defaults
Must use <tab> for company-complete-selection "TAB doesn't works!!!!!!!!!!!!!
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 0.35)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t)
  (setq company-show-numbers t)
  (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
  (define-key company-active-map (kbd "TAB") #'company-complete-selection)
  )
#+END_SRC
** TODO Colorful
#+BEGIN_SRC emacs-lisp tangle:no
;(after! company-box
;     (setq company-box-backends-colors
;           '((company-yasnippet . (:all "lime green" :selected (:background "lime green" :foreground "black"))))
;           ))
#+END_SRC

* lookup
** Zeal-at-point
| SPC d z | Look at zeal          |
| K       | Default Documentation |
| SPC s k | Look at firefox       |
Firefox because I can use hjkl on firefox but not in Xwidget
#+BEGIN_SRC emacs-lisp
(use-package zeal-at-point)
(map! :leader
      :desc "Zeal Look Up"
      "d z" #'zeal-at-point
      )
#+END_SRC
** TODO Online doesn't works
+ ~+lookup/online~
+ ~+lookup/online-select~
* dired
** peep-dired
#+BEGIN_SRC emacs-lisp
(map!
  (:after dired
    (:map dired-mode-map
      :n "RET" 'dired-find-alternate-file ;;Open in same bufer
          "-"   'find-alternate-file)
          "C-x i" #'peep-dired
     ))
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC
* zen
#+BEGIN_SRC emacs-lisp
(setq writeroom-fullscreen-effect t)
#+END_SRC
* snippets
#+BEGIN_SRC emacs-lisp
;(add-hook! yas-minor-mode
;  (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand))

#+END_SRC
* Additional Packages
** turkish
#+BEGIN_SRC emacs-lisp
(use-package turkish)
(use-package rainbow-mode)
#+END_SRC
* Fonts
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "SauceCodePro Nerd Font" :size 17)
      doom-variable-pitch-font (font-spec :family "SauceCodePro Nerd Font" :size 15)
      doom-big-font (font-spec :family "SauceCodePro Nerd Font" :size 24)
)
#+END_SRC
#+BEGIN_SRC emacs-lisp

#+END_SRC
