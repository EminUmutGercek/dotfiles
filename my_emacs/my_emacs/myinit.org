* No Ugly
    #+BEGIN_SRC emacs-lisp
	(setq inhibit-startup-message t)
	(tool-bar-mode -1)
	(menu-bar-mode -1)
	(scroll-bar-mode -1)
	(blink-cursor-mode 0)
	(setq make-backup-files nil)
    #+END_SRC
* Good Features
  #+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
** Backup and Autosave files
   #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '((".*" . "~/.emacs.d/backup")))
    (setq version-control t)
    (setq delete-old-versions t)
   #+END_SRC
* Packages
** Evil
*** Mine [Disabled]
    (require 'evil)
    (evil-mode 1)
*** Nice
    #+BEGIN_SRC emacs-lisp
    ; Evil Mode
	(use-package evil
	:ensure t
	:config

	(evil-mode 1)
	(use-package evil-leader
	    :ensure t
	    :config
	    (global-evil-leader-mode t)
	    (evil-leader/set-leader "<SPC>")
	    (evil-leader/set-key
	    "s s" 'swiper
	    "d x w" 'delete-trailing-whitespace))

	(use-package evil-surround
	    :ensure t
	    :config (global-evil-surround-mode))

	(use-package evil-indent-textobject
	    :ensure t)

	(use-package evil-org
	    :ensure t
	    :config
	    (evil-org-set-key-theme
		'(textobjects insert navigation additional shift todo heading))
	    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))

	)
    #+END_SRC
** Autocomplete
   #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
	:ensure t
	:init
	(progn
	    (ac-config-default)
	    (global-auto-complete-mode t)))
   #+END_SRC
** Which key
    #+BEGIN_SRC emacs-lisp
    (use-package which-key
	    :ensure t 
	    :config
	    (which-key-mode))
    #+END_SRC
** Ido [Disabled]
	(setq ido-enable-flex-matching t)
	(setq ido-everywhere t)
	(defalias 'list-buffers 'ibuffer)
	(ido-mode 1)
** Ivy
   #+BEGIN_SRC emacs-lisp
    (use-package ivy :ensure t
	:bind
	(:map ivy-mode-map
	("C-'" . ivy-avy))
	:config
	(ivy-mode 1)
	;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
	(setq ivy-use-virtual-buffers t)
	;; number of result lines to display
	(setq ivy-height 10)
	;; does not count candidates
	(setq ivy-count-format "")
	;; no regexp by default
	(setq ivy-initial-inputs-alist nil)
	;; configure regexp engine.
	(setq ivy-re-builders-alist
		;; allow input not in order
		'((t   . ivy--regex-ignore-order))))
   #+END_SRC
** Swiper/Ivy/Counsel
    #+BEGIN_SRC emacs-lisp
	(use-package counsel
	:ensure t
	)

	(use-package swiper
	:ensure try
	:config
	(progn
	    (ivy-mode 1)
	    (setq ivy-use-virtual-buffers t)
	    (global-set-key "\C-s" 'swiper)
	    (global-set-key (kbd "C-c C-r") 'ivy-resume)
	    (global-set-key (kbd "<f6>") 'ivy-resume)
	    (global-set-key (kbd "M-x") 'counsel-M-x)
	    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	    (global-set-key (kbd "<f1> l") 'counsel-load-library)
	    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	    (global-set-key (kbd "C-c g") 'counsel-git)
	    (global-set-key (kbd "C-c j") 'counsel-git-grep)
	    (global-set-key (kbd "C-c k") 'counsel-ag)
	    (global-set-key (kbd "C-x l") 'counsel-locate)
	    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	    ))
    #+END_SRC
** Flycheck
   Syntax checker comminicates with languages tools (i.e python-flake8)
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :init
       (add-hook 'python-mode-hook 'jedi:setup)
       (add-hook 'python-mode-hook 'jedi:ac-setup))
     (use-package elpy
       :ensure t
       :config
       (elpy-enable))


   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (yas-global-mode 1))
   #+END_SRC
** Golden Ratio
   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio
       :ensure t
       :init
       (golden-ratio-mode 1)
	(setq golden-ratio-extra-commands
	    (append golden-ratio-extra-commands
		    '(evil-window-left
			evil-window-right
			evil-window-up
			evil-window-down
			select-window-1
			select-window-2
			select-window-3
			select-window-4
			select-window-5))))
   #+END_SRC
** Popup Kill Ring
   #+BEGIN_SRC emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :bind
       ("M-y" . popup-kill-ring))
   #+END_SRC
** Autopair
   #+BEGIN_SRC emacs-lisp
     (use-package autopair
       :ensure t
       :init
       (autopair-global-mode))
   #+END_SRC
** bbdb
* Evil State color
  #+BEGIN_SRC emacs-lisp
    (setq evil-emacs-state-cursor '("red" box))
    (setq evil-normal-state-cursor '("green" box))
    (setq evil-visual-state-cursor '("orange" box))
    (setq evil-insert-state-cursor '("red" bar))
    (setq evil-replace-state-cursor '("red" bar))
    (setq evil-operator-state-cursor '("MediumSpringGreen" hollow))
  #+END_SRC
  1. H L for window movements
  #+BEGIN_SRC emacs-lisp
    (unbind-key (kbd "L") evil-motion-state-map)
    (unbind-key (kbd "H") evil-motion-state-map)
    (define-key evil-normal-state-map (kbd "H") 'evil-window-left)
    (define-key evil-normal-state-map (kbd "L") 'evil-window-right)
  #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :init (load-theme 'gruvbox-dark-soft t))
  #+END_SRC
* Org Mode
** Org Bullets
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :init (add-hook 'org-mode-hook #'org-bullets-mode))
   #+END_SRC
** Keybings
   #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC
** Default Notes File [/]
   #+BEGIN_SRC emacs-lisp
   ;;(setq org-default-notes-file (concat org-directory "/notes.org"))
   #+END_SRC
** Org Agenda Files 
    | inbox   | Where I collect everything                                                     |
    | gtd     | Where I put all my projects                                                    |
    | someday | All inactive tasks that don’t want to see all the time, but oneday             |
    | tickler | Entries are in this file with a timestamp to get reminded at the right moment. |
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files '("~/gtd/inbox.org"
                         "~/gtd/gtd.org"
                         "~/gtd/tickler.org"))
   #+END_SRC
** Org Template 
   #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates '(
				("t" "Todo [inbox]" entry (file+headline "~/gtd/inbox.org" "Tasks") "* TODO %i%?")
				("T" "Tickler" entry (file+headline "~/gtd/tickler.org" "Tickler") "* %i%? \n %U")))
   #+END_SRC

  
