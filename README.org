#+TITLE: System Install Steps


* Scripts
** Install configs
#+begin_src sh :tangle ./scripts/install-configs.sh :shebang "#!/bin/bash"
stow -D * -t ~
stow * -t ~
#+end_src
* Installing Doom Emacs :manual:
Only manually download this!
*Download Sauce Code Pro*
[[https://github.com/hlissner/doom-emacs#install][Github page]]
#+BEGIN_SRC sh :dir ~/
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom install
ln -s .config/dotfiles/doom_emacs/.doom.d/ ~/
~/.emacs.d/bin/doom sync
#+END_SRC

** Compiling Some Packages
*** vterm
Just =SPC o t= and press =y=
*** epdinfo
~pdf-tools-install~
** Emacs Daemon
In .bashrc

#+begin_src shell
alias emacs="emacsclient -c"
alias emacst="emacsclient -t"
#+end_src

** systemd emacs.service
#+begin_src conf :tangle ./systemd/emacs.service
[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=/usr/bin/emacs --daemon
ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure

[Install]
WantedBy=default.target
#+end_src

Also assign a keybinding for ~emacsclient -c~
* zsh setup
:PROPERTIES:
:header-args:    :tangle ./scripts/zsh_setup.sh :shebang "#!/bin/bash"
:END:
** Install zsh
#+begin_src sh
sudo dnf install zsh
#+end_src
** Change zsh to default shell
#+begin_src shell
chsh -s /bin/zsh
#+end_src
** Install oh-my-zsh
https://ohmyz.sh/#install

#+begin_src sh
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#+end_src
** Install Font for powerlevel10k
https://github.com/romkatv/powerlevel10k#manual-font-installation
Preferences -> Selected profile -> Text > Text Appereance -> Custom Font :  Select MesloLGS NF Regular.
** Zsh Packages
*** Install needed dnf packages for zsh packages
#+begin_src sh
sudo dnf install fzf zsh-autosuggestions zsh-syntax-highlighting
#+end_src
*** Install powerlevel10k prompt
https://github.com/romkatv/powerlevel10k#oh-my-zsh
#+begin_src sh
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
#+end_src
*** Install zsh-autosuggestions
https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md#oh-my-zsh

#+begin_src sh
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
#+end_src

#+RESULTS:
*** Install zsh-syntax-highlight
https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md#oh-my-zsh

#+begin_src sh
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
#+end_src
* Browser Extensions
** List
*** Chrome
- Audio Pan
- Video Speed Controller
- Volume Booster
- Theme
- Dark Reader
- Material DevTools Theme Collection
- BehindTheOverlay
- Chrome extension source viewer
- EditThisCookie
- Extension Manager
- GNOME Shell integration
- Google Dictionary (by Google)
- Grammarly for Chrome
- JSON Formatter
- Midnight Lizard
- MyBib: Free Citation Generator
- Relay: Chat on Every Website
- Surfingkeys
- uBlock Origin
- Touch VPN - Secure and unlimited VPN
- Vimium
- Wappalyzer
- WhatRuns
- Wikiwand: Wikipedia Modernized
- YouTube Playlist Duration
- C/C++
*** Only Firefox
- Element Blocker
- Code Copier
- Flagfox
- Firefox Multi Account Containers
- Shortkeys
- Snap Links
- Chrome
Video & Audio
Audio Pan
** Configs
*** Video Speed Controller
| Show/hide | controller | V  |   0 |
| Decrease  | speed      | S  | 0.1 |
| Increase  | speed      | D  | 0.1 |
| Rewind    | Z          | 10 |     |
| Advance   | X          | 10 |     |
| Reset     | speed      | R  |   1 |
| Preferred | speed      | G  |   1 |
| Rewind    | H          | 10 |     |
*** Surfingkeys
Add  =https://raw.githubusercontent.com/EminUmutGercek/.dotfiles/master/surfingkeys= to  =Load settings from:=
* Literate Configs
** Flameshot
:PROPERTIES:
:header-args:conf: :tangle ./flameshot/flameshot.ini
:END:

As a convention, I used lower cased letters for the bindings I've changed.
*** General
#+begin_src conf
[General]
#+end_src

#+begin_src conf
checkForUpdates=false
copyPathAfterSave=true
disabledTrayIcon=false
drawThickness=2
filenamePattern=%F-%H
savePath=~/Pictures
savePathFixed=false
startupLaunch=true
#+end_src

**** Look
#+begin_src conf
contrastOpacity=127
showHelp=false
showSidePanelButton=false
showStartupLaunchMessage=false
buttons=@Variant(\0\0\0\x7f\0\0\0\vQList<int>\0\0\0\0\x14\0\0\0\0\0\0\0\x1\0\0\0\x2\0\0\0\x3\0\0\0\x4\0\0\0\x5\0\0\0\x6\0\0\0\x12\0\0\0\xf\0\0\0\a\0\0\0\b\0\0\0\t\0\0\0\x10\0\0\0\n\0\0\0\v\0\0\0\f\0\0\0\r\0\0\0\xe\0\0\0\x11\0\0\0\x13)
#+end_src

***** Theme
#+begin_src conf
uiColor=#009685
contrastUiColor=#80faff
drawColor=#220080
#+end_src
*** Bindings
**** Default bindings
Order is from ~flameshot config~.
#+begin_src conf
[Shortcuts]
#+end_src
***** Choose from bar
#+begin_src conf
TYPE_DRAWER=D
TYPE_ARROW=A
TYPE_SELECTION=S
TYPE_RECTANGLE=R
TYPE_CIRCLE=C
TYPE_TEXT=T
TYPE_PIXELATE=B
#+end_src
***** CUA
=C-RET= is for finishing text entering.
#+begin_src conf
TYPE_UNDO=Ctrl+Z
TYPE_COPY=Ctrl+C
TYPE_SAVE=Ctrl+S
TYPE_OPEN_APP=Ctrl+O
TYPE_SELECT_ALL=Ctrl+A
TYPE_EXIT=Ctrl+Q
TYPE_COMMIT_CURRENT_TOOL=Ctrl+Return
TYPE_TOGGLE_PANEL=Space
#+end_src
**** Mines
| Pin            | =e= |
| Circle Count   | =q= |
| Pencil         | =x= |
| Marker         | =z= |
| Move selection | =w= |

#+begin_src conf
TYPE_CIRCLECOUNT=q
TYPE_REDO=Ctrl+y
TYPE_PIN=e
#+end_src

Hard to press
#+begin_src conf
TYPE_PENCIL=x
TYPE_MARKER=z
#+end_src
***** Movement of selection
#+begin_src conf
TYPE_MOVE_DOWN=j
TYPE_MOVE_LEFT=h
TYPE_MOVE_RIGHT=l
TYPE_MOVE_UP=k
#+end_src

Resize with respect to right bottom corner. In other words it moves right bottom corner.

#+begin_src conf
TYPE_RESIZE_DOWN=Shift+j
TYPE_RESIZE_LEFT=Shift+h
TYPE_RESIZE_RIGHT=Shift+l
TYPE_RESIZE_UP=Shift+k
#+end_src

Escape to move with mouse
#+begin_src conf
TYPE_MOVESELECTION=W
#+end_src
** Surfingkeys
:PROPERTIES:
:header-args: :tangle surfingkeys.js
:END:
*** Misc
#+begin_src js
settings.hintAlign = "left";
//Hints.characters = 'yuiophjklnm'; // for right hand
api.Hints.characters = 'fjdkrueisl'; // Home row without pinky

api.cmap('<Ctrl-j>', '<Tab>');
api.cmap('<Ctrl-k>', '<Shift-Tab>');
#+end_src
*** Variable configs
#+begin_src js
settings.hintAlign = "left";
//Hints.characters = 'yuiophjklnm'; // for right hand
api.Hints.characters = "fjdkrueisl"; // Home row without pinky

let videoKeys = ["v", "s", "d", "h", "l", "r"]; //Video Speed Controller Keys
let youtubeKeys = ["i", "f", "c", "0"];
let blockSites = [
  "netflix.com",
  "youtube.com",
  ".*dizi.*",
  ".*film.*",
  ".*anime.*",
  "udemy.com",
];

const leaderKey = ",";
#+end_src
*** Util functions
[[https://github.com/brookhong/Surfingkeys/blob/master/src/content_scripts/common/api.js#L132][map]] handles bad domain
#+begin_src js
const alt_key = (key) => leaderKey + key;

// `map` handles bad domain
const key = (newKey, oldKey, domain) => {
  if (newKey) {
    api.map(newKey, oldKey, domain);
  }
  api.unmap(oldKey);
};

#+end_src
*** Handle video keybinding collisions
#+begin_src js
let videoBlockedKeys = new RegExp(blockSites.join("|"), "i");
let youtubeBlockedKeys = new RegExp(blockSites.join("|"), "i");

videoKeys.forEach((i) => api.map(alt_key(i), i, videoBlockedKeys));
youtubeKeys.forEach((i) => api.map(alt_key(i), i, youtubeBlockedKeys));

videoKeys.forEach((i) => api.unmap(i, videoBlockedKeys));
youtubeKeys.forEach((i) => api.unmap(i, youtubeBlockedKeys));
#+end_src
*** Remap for vimium like bindings
#+begin_src js
key("J", "E");
key("K", "R");
key("H", "S");
key(";o", "<Ctrl-6>");
key("L", "D");
key("F", "gf");
#+end_src

*** Remove bindings
**** Remove unnecessary bindings
#+begin_src js
api.unmap("<Ctrl-j>");
api.unmap("<Ctrl-h>");
api.unmap(";m")
api.unmap(";m")


//
api.unmap("e")
#+end_src

**** Remove Duplicate bindings
***** Mouse Click
#+begin_src js
api.unmap("C")
api.unmap("<Ctrl-i>")
#+end_src

*** KILL Firefox treestyle tab
CLOSED: [2021-08-15 Paz 00:46]
:PROPERTIES:
:header-args: :tangle no
:END:
Make J a K.
#+begin_src js
//With Tree Style Tab
map('J', 'R');
map('K', 'E');
#+end_src

#+begin_src js
//Tree Style Tab Shortcuts
unmap('e');

mapkey('ej', 'Move down current tab', () => {
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type:           'move-down',
        tab:            'current',
        followChildren: false
    });
});

mapkey('eJ', 'Move down current tabs tree', () => {
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type:           'move-down',
        tab:            'current',
        followChildren: true
    });
});

mapkey('ek', 'Move up current tab', () => {
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type:           'move-up',
        tab:            'current',
        followChildren: false
    });
});

mapkey('eK', 'Move up current tabs tree', () => {
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type:           'move-up',
        tab:            'current',
        followChildren: true
    });
});


mapkey('ez', 'Toggle tree collapse state', () => {
    //Call from root of tree
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type: 'toggle-tree-collapsed',
        tab:  'active' // required, tabs.Tab.id or alias
    });
});

mapkey('el', 'Indent/Demote a tab', () => {
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type:           'indent',
        tab:            'current',
        followChildren: false
    });
});

mapkey('eh', 'Outdent/Promote a tab', () => {
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type:           'outdent',
        tab:            'current',
        followChildren: false
    });
});

mapkey('eL', 'Indent/Demote a tree', () => {
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type:           'indent',
        tab:            'current',
        followChildren: true
    });
});

mapkey('eH', 'Outdent/Promote a tree', () => {
    browser.runtime.sendMessage('treestyletab@piro.sakura.ne.jp', {
        type:           'outdent',
        tab:            'current',
        followChildren: true
    });
});
#+end_src
*** New Functionalities
**** Yank image's source URL
#+begin_src js
api.mapkey('ye', 'Copy src URL of an image', function() {
    Hints.create('img[src]',(element, event) =>  {
        api.Clipboard.write(element.src);
    });
});

api.mapkey('yme', 'Copy multiple link URLs to the clipboard', function() {
    let linksToYank = [];
    Hints.create('img[src]', function(element) {
        linksToYank.push(element.src);
        api.Clipboard.write(linksToYank.join('\n'));
    }, {multipleHits: true});
});
#+end_src
**** Go to next episode
#+begin_src js
api.mapkey(';n', 'Go to next episode',
       function next_episode(){
           base_url = window.location.href
           ep_no = base_url.match(/(\d+)(?!.*\d)/)[0];
           new_ep = parseInt(ep_no, 10) + 1;
           n = base_url.lastIndexOf(ep_no);
           new_url = base_url.slice(0, n) + base_url.slice(n).replace(ep_no, new_ep);
           window.location = new_url;
       });
#+end_src
**** Copy title and url for org mode
#+begin_src js
api.mapkey(";c", "Copy title and url for org mode", () => {
  let url = document.URL;
  let title = document.title;
  api.Clipboard.write(`[[${url}][${title}]]`);
});
#+end_src
*** Binding TODOs
These are the bindings I'm currently trying to getting used to..
:PROPERTIES:
:header-args: :tangle no
:END:
**** Mouse Click
***** TODO Look at
| =[[= | Click on the previous link on current page |
| =]]= | Click on the next link on current page     |
***** IDEA Getting used to
#+tblname: mouse-click-current
| Keybinding | Description                                |
|------------+--------------------------------------------|
| =;fs=      | Display hints to focus scrollable elements |
| =;di=      | Download image                             |
| =af=       | Open a link in active new tab              |
| =O=        | Open detected links from text              |
| =q=        | Click on an Image or a button              |
**** Tabs
***** TODO Look at
| =;gt= | Gather filtered tabs into current window |
| =;gw= | Gather all tabs into current window      |

***** IDEA Geting used to
#+tblname: tabs-current
| =T=       | Choose a tab                 |
|-----------+------------------------------|
| =zr=      | zoom reset                   |
| =zi=      | zoom in                      |
| =zo=      | zoom out                     |
|-----------+------------------------------|
| =<Alt-p>= | Pin current tab              |
| =<Alt-m>= | Mute current tab             |
| =on=      | Open new tab (=<Control-t>=) |
***** HOLD Will get used to
#+name: tabs-current
| =yt=  | Duplicate current tab               |
| =yT=  | Duplicate current tab in background |
| =g0=  | Go to the first tab                 |
| =g$=  | Go to the last tab                  |
| =gx0= | Close all tabs on left              |
| =gxt= | Close tab on left                   |
| =gxT= | Close tab on right                  |
| =gx$= | Close all tabs on right             |
| =gxx= | Close all tabs except current one   |
*** Create currently training bindings popup
#+begin_src js :var mouse=mouse-click-current tabs=tabs-current :results output
const showCurrentTrainingBindings = () => {
    const messages = [...mouse, ...tabs].map(row => ( {
            binding: row[0].slice(1, -1),
            description: row[1]
        }))
        .map(obj => `${obj.binding}\t\t\t\t${obj.description}`)

    Front.showPopup(`<h1>${messages.join('<br>')} </h1>`);
}

api.mapkey(";?", "Show currently training keybindings", showCurrentTrainingBindings);
#+end_src
*** Site specific
**** GitHub
#+begin_src js
api.mapkey(
  "ec",
  "GitHub Clone Repo (HTTPS)",
  () => {
    const gitURL = `${document.URL}.git`;
    const terminalCommand = `git clone ${gitURL}`;
    api.Clipboard.write(terminalCommand);
  },
  { domain: /github.com/i }
);
#+end_src

* vscode extensions :manual:
** Export
#+begin_src sh :tangle no
code --list-extensions > vscode-extensions
#+end_src
** Import
#+begin_src sh : tangle no
cat vscode-extensions | { code --install-extension $_}
#+end_src
* Stow
** =.stow-local-ignore=
#+begin_src text :tangle .stow-local-ignore
scripts
old
systemd
vscode
*.org
*.js
#+end_src
* Fedora
** Fedora packages
*** dnf
:PROPERTIES:
:header-args: :tangle ./packages/dnf-packages
:END:
**** Terminal
***** Important
#+begin_src text
tree
vim
ImageMagick
youtube-dl
acpi
tldr
lm_sensors
the_silver_searcher
ripgrep
docker
xclip
cronie
aspell
aspell-en
translate-shell
ascii
#+end_src

***** Other
#+begin_src text
htop
cmatrix
cowsay
figlet
lolcat
speedtest-cli
neofetch
glances
telnet
hugo
inxi
cloc
xdotool
stress
pdfgrep
#+end_src
***** Shiny/Neo
#+begin_src sh
bat
#+end_src

**** Emacs
#+begin_src text
emacs
libvterm
plantuml
pandoc
texlive-scheme-full
fd-find
#+end_src
**** GUI Programs
#+begin_src text
qbittorrent
okular
flameshot
kruler
hexchat
#+end_src
**** Programming Languages
***** Python
#+begin_src text
bpython
#+end_src
***** C/C++
#+begin_src text
cmake
libtool
clang
meson
valgrind
#+end_src
***** Lisp
#+begin_src text
rlwrap
#+end_src
****** Common Lisp
#+begin_src text
sbcl
#+end_src
***** Javascript
#+begin_src text
nodejs
#+end_src
***** C# .NET
#+begin_src text
dotnet-sdk-5.0
dotnet-runtime-5.0
#+end_src

**** Cyber Security
#+begin_src text
nmap
#+end_src
**** Git :fedora_specific:
#+begin_src shell
git-instaweb
#+end_src
**** Fonts
#+begin_src text
overpass-fonts
#+end_src
**** Gnome
#+begin_src text
gnome-tweaks
#+end_src
**** Xorg
#+begin_src text
xkill
#+end_src
*** flatpak
:PROPERTIES:
:header-args: :tangle ./packages/flatpak-packages
:END:
#+begin_src text
Discord
Dropbox
Flatseal
Spotify
Peek
FontFinder
Postman
zeal
Kooha
#+end_src
*** snap
:PROPERTIES:
:header-args: :tangle ./packages/snap-packages
:END:
#+begin_src text
code --classic
sqlitebrowser
#+end_src
*** pip packages
:PROPERTIES:
:header-args: :tangle ./packages/pip-packages
:END:
#+begin_src text
pytest
nose
python-language-server[all]
pyright
#+end_src
** Fedora Settings
*** Fonts
#+begin_src text
sudo dnf install curl cabextract xorg-x11-font-utils fontconfig
sudo rpm -i https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm
#+end_src
*** Cronjobs
Make sure that =cronnie= is installed via dnf.
#+begin_src sh
systemctl enable crond.service
#+end_src
** Keybindings
| Super + I | Invert Colors |

*** Navigation
| Super + h         | Move to workspace on the left          |
| Super + l         | Move to workspace on the right         |

| Super + Shift + l | Move window one workspace to the left  |
| Super + Shift + h | Move window one workspace to the right |


| Super + Shift + 1 | Move window to workspace 1 |
| Super + Shift + 2 | Move window to workspace 2 |
| Super + Shift + 3 | Move window to workspace 3 |
| Super + Shift + 4 | Move window to workspace 4 |

| Super + 1 | Switch to workspace 1 |
| Super + 2 | Switch to workspace 2 |
| Super + 3 | Switch to workspace 3 |
| Super + 4 | Switch to workspace 4 |

| Super + o | Swtich window directly *other* |

*** Windows
| Super + x | Close |
| Super + m | Maximize |
*** Custom
| Super + ; | ~/usr/bin/guake -t~        |
| Super + , | ~/usr/bin/emacsclient -c~  |
| Print     | ~/usr/bin/flameshot gui~ |
** Copr
#+begin_src text
taw/element
#+end_src
*** Package
#+begin_src text
element
#+end_src
* Arch
** Old
*** pacman
#+begin_src text :tangle ./packages/pacman-packages
nvidia-settings
pacman-contrib
pactree
ttf-unifont
gnupg
powerline-fonts
tree
emacs
acpi
ttf-hack
vim
arandr
alacritty
imagemagick
tty-clock
cmatrix
cowsay
figlet
lolcat
anki
youtube-dl
mpv
speedtest-cli
bluez-hid2hci
pulseaudio-bluetooth
python-pip
bpython
alsamixer
qbittorrent
tldr
libvterm
#+end_src
*** yay
#+begin_src text :tangle ./packages/yay-packages
powerline-fonts-git
ttf-unifont
siji-git ttf-unifont
ptpython
nushell
powershell
zoom
stress-ng
#+end_src
* TODO Network
- Add DNS
- Add Disable ipv6
